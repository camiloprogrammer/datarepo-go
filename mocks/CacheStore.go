// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"

import mock "github.com/stretchr/testify/mock"
import time "time"

// CacheStore is an autogenerated mock type for the CacheStore type
type CacheStore struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, key
func (_m *CacheStore) Delete(ctx context.Context, key string) error {
	ret := _m.Called(ctx, key)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, key, out
func (_m *CacheStore) Get(ctx context.Context, key string, out interface{}) (bool, error) {
	ret := _m.Called(ctx, key, out)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) bool); ok {
		r0 = rf(ctx, key, out)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, interface{}) error); ok {
		r1 = rf(ctx, key, out)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMulti provides a mock function with given fields: ctx, keys, out
func (_m *CacheStore) GetMulti(ctx context.Context, keys []string, out interface{}) ([]bool, error) {
	ret := _m.Called(ctx, keys, out)

	var r0 []bool
	if rf, ok := ret.Get(0).(func(context.Context, []string, interface{}) []bool); ok {
		r0 = rf(ctx, keys, out)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]bool)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []string, interface{}) error); ok {
		r1 = rf(ctx, keys, out)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Set provides a mock function with given fields: ctx, key, value, expiration
func (_m *CacheStore) Set(ctx context.Context, key string, value interface{}, expiration time.Duration) {
	_m.Called(ctx, key, value, expiration)
}
